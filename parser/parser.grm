(*structure A = Absyn*)

%%
%eop EOF
%verbose
%pure
%name gram

%term
    EOF
	|ID of string
	|INT_CONST of int
	|PLUS
	|MINUS
	|STRING_CONST of string
	|INT
	|STRING
	|TIMES
	|DIVIDE
	|EQ
	|NEQ
	|LT
	|LE
	|GT
	|GE
	|AND
	|OR
	|LBRACE
	|RBRACE
	|LBRACK
	|RBRACK
	|LPARAN
	|RPARAN
	|SEMICOLON
	|WHILE
	|IF
	|ELSE
	|NIL
    |ASSIGN
    
    
%nonterm
	start
	|statements
	|statement
	|arith_exp
	|exp
	|comp_exp
	


%left OR
%left AND
%left EQ NEQ
%left LT LE GT GE
%left PLUS MINUS
%left TIMES DIVIDE            (*add %*)
%pos INT
(*

Operator precedence and associativity. The %left says the operator is
left associative and the precedence increase as you go down this list.

*)	
(*
%nonassoc
	EQ
	|NEQ
	|LE
	|GE
	|LT
	|GT

%left
	PLUS
	| MINUS
	| TIMES
	| DIVIDE
	| AND
	| OR

*)
%%

start: statements						()

statements : statement statements 			()
	|NIL							()
	
statement:  WHILE LPARAN comp_exp RPARAN LBRACE statements RBRACE	()
	| IF LPARAN comp_exp RPARAN LBRACE statements RBRACE		()
	| IF LPARAN comp_exp RPARAN LBRACE statements RBRACE ELSE LBRACE statements RBRACE	()
	| INT ID ASSIGN arith_exp SEMICOLON							()
	| STRING ID ASSIGN STRING_CONST SEMICOLON                   ()
	| ID ASSIGN arith_exp SEMICOLON							()
	

comp_exp :
	comp_exp AND comp_exp					()
	| comp_exp OR comp_exp					()
(*	| comp_exp EQ comp_exp						()  *)
	| arith_exp EQ arith_exp					()
	| arith_exp LT arith_exp					()
	| arith_exp LE arith_exp					()
	| arith_exp GE arith_exp					()
	| arith_exp NEQ arith_exp					()
	| arith_exp GT arith_exp					()

arith_exp : arith_exp PLUS arith_exp				()
	| arith_exp MINUS arith_exp					()
	| arith_exp TIMES arith_exp					()
	| arith_exp DIVIDE arith_exp				()
	| exp							()
	| LBRACE arith_exp RBRACE				()

exp : ID							()
    | INT_CONST							()
	| STRING_CONST                      ()



	
