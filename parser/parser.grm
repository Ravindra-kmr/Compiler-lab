structure A = Ast

%%
%eop EOF
%verbose
%pure
%name C

%term
    EOF
	|ID of string
	|INT_CONST of int
	|PLUS
	|MINUS
	|STRING_CONST of string
	|INT
	|STRING
	|TIMES
	|DIVIDE
	|EQ
	|NEQ
	|LT
	|LE
	|GT
	|GE
	|AND
	|OR
	|LBRACE
	|RBRACE
	|LBRACK
	|RBRACK
	|LPARAN
	|RPARAN
	|SEMICOLON
	|WHILE
	|FOR
	|IF
	|ELSE
	|NIL
    |ASSIGN
    
    
%nonterm
	start   of Ast.Stms list
	|statements of Ast.Stms list
	|statement of Ast.Stms
	|arith_exp  of Ast.Expr
	|exp of Ast.Expr
	|comp_exp of Ast.Expr


%right ASSIGN
%left OR
%left AND
%left EQ NEQ
%left LT LE GT GE
%left PLUS MINUS
%left TIMES DIVIDE            (*add %*)
%pos int
%noshift EOF
(*

Operator precedence and associativity. The %left says the operator is
left associative and the precedence increase as you go down this list.

*)	
(*
%nonassoc
	EQ
	|NEQ
	|LE
	|GE
	|LT
	|GT

%left
	PLUS
	| MINUS
	| TIMES
	| DIVIDE
	| AND
	| OR

*)
%%

start: statements						(statements)

statements : statement statements 			(statement::statements)
            |               ([])
	
statement:  WHILE LPARAN comp_exp RPARAN LBRACE statements RBRACE	(Ast.While(comp_exp, statements))
	| IF LPARAN comp_exp RPARAN LBRACE statements RBRACE		(Ast.If(comp_exp,statements))
	| IF LPARAN comp_exp RPARAN LBRACE statements RBRACE ELSE LBRACE statements RBRACE	(Ast.Ifelse(comp_exp,statements1,statements2))
	| FOR LPARAN ID ASSIGN arith_exp SEMICOLON comp_exp SEMICOLON ID ASSIGN arith_exp RPARAN LBRACE statements RBRACE   (Ast.For((ID,arith_exp1),comp_exp,(ID,arith_exp2),statements))
	| INT ID ASSIGN arith_exp SEMICOLON							(Ast.Assign(ID,arith_exp))
(*	| STRING ID ASSIGN STRING_CONST SEMICOLON                   (Ast.Assign(ID,))           *)
	| ID ASSIGN arith_exp SEMICOLON							(Ast.Assign(ID,arith_exp))
	

comp_exp :
	comp_exp AND comp_exp					(Ast.and_op(comp_exp1,comp_exp2))
	| comp_exp OR comp_exp					(Ast.or_op(comp_exp1,comp_exp2))
(*	| comp_exp EQ comp_exp						()  *)
	| arith_exp EQ arith_exp					(Ast.equality(arith_exp1,arith_exp2))
	| arith_exp LT arith_exp					(Ast.less_then(arith_exp1,arith_exp2))
	| arith_exp LE arith_exp					(Ast.smaller_or_equal(arith_exp1,arith_exp2))
	| arith_exp GE arith_exp					(Ast.greater_or_equal(arith_exp1,arith_exp2))
	| arith_exp NEQ arith_exp					(Ast.not_equal(arith_exp1,arith_exp2))
	| arith_exp GT arith_exp					(Ast.greater_then(arith_exp1,arith_exp2))

arith_exp : arith_exp PLUS arith_exp				(Ast.plus(arith_exp1,arith_exp2))
	| arith_exp MINUS arith_exp					(Ast.minus(arith_exp1,arith_exp2))
	| arith_exp TIMES arith_exp					(Ast.times(arith_exp1,arith_exp2))
	| arith_exp DIVIDE arith_exp				(Ast.divide(arith_exp1,arith_exp2))
	| exp							(exp)          (*doubt, what to fill*)
(*	| LBRACE arith_exp RBRACE				()          *)

exp : ID							(Ast.Id(ID))
    | INT_CONST							(Ast.Const(INT_CONST))
                            


	
