(*structure A = Absyn*)

%%
%eop EOF
%verbose
%pure
%name gram

%term
    EOF
	|ID of string
	|INT of int
	|PLUS
	|MINUS
	|STRING of string
	|TIMES
	|DIVIDE
	|EQ
	|NEQ
	|LT
	|LE
	|GT
	|GE
	|AND
	|OR
	|LBRACE
	|RBRACE
	|DOT
	|LBRACK
	|RBRACK
	|LPARAN
	|RPARAN
	|SEMICOLON
	|WHILE
	|FOR
	|BREAK
	|CONTINUE
	|IF
	|ELSE
	|ELSEIF

%nonterm
	empty
	|start
	|arith_exp
	|exp
	|comp_exp
	|lvalue
	|unit_exp
	


%left OR
%left AND
%left EQ NEQ
%left LT LE GT GE
%left PLUS MINUS
%left TIMES DIVIDE            (*add %*)
%pos INT
(*

Operator precedence and associativity. The %left says the operator is
left associative and the precedence increase as you go down this list.

*)	
(*
%nonassoc
	EQ
	|NEQ
	|LE
	|GE
	|LT
	|GT

%left
	PLUS
	| MINUS
	| TIMES
	| DIVIDE
	| AND
	| OR

*)
%%

start: exp						()

exp : INT						()
	|STRING						()
	|BREAK						()	
	|CONTINUE					()
	|arith_exp					()
	|comp_exp					()
	|lvalue						()
	|WHILE LPARAN exp RPARAN LBRACE exp RBRACE	()	
	|IF LBRACE exp RBRACE				()
	|ELSE LBRACE exp RBRACE				()
	|LPARAN exp RPARAN				() 

arith_exp : exp PLUS exp				()
	| exp MINUS exp					()
	| exp TIMES exp					()
	| exp DIVIDE exp				()
	


comp_exp :
	exp AND exp					()
	| exp OR exp					()
	| exp EQ exp					()
	| exp LT exp					()
	| exp LE exp					()
	| exp GE exp					()
	| exp NEQ exp					()
	| exp GT exp					()

lvalue : 
	ID                                  ()
(*	| ID LBRACK exp RBRACK				()  *)
	| lvalue LBRACK exp RBRACK			()

(*
unit_exp :
	LPARAN RPARAN					()
	*)


	
